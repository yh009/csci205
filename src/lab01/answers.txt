/* ****************************************** CSCI205 - Software Engineering and Design* Spring 2017* Instructor: Prof Christopher Dancy * Section: 1pm* Name: Yuxuan Huang* Date: 01/19/2017** Lab / Assignment: Lab01** Description:** *****************************************/(1.1) /home/accounts/student/y/yh009(1.2) list ALL directory contents, do not ignore entries starting with .(1.3) use a long listing format, show permission, author, etc for each entry(1.4) -at    sort all files by modification time, newest first(1.5) -atr (1.6) -S(1.7) [yh009@linuxremote1 ~]$ ls -lR csci205csci205:total 4drwx--x--x 3 yh009 student 4096 Jan 18 21:05 srccsci205/src:total 4drwx--x--x 2 yh009 student 4096 Jan 18 13:56 lab01csci205/src/lab01:total 4-rw------- 1 yh009 student 292 Jan 18 13:56 answers.txt(2.1) Version control is a system that records changes to a file or set of files over time so that you can recall specific versions later.(2.2) Local VCS: only one developer developing on one specific computer      Centralized VCS: multiple developers developing on different computers      Distributed VCS: adding security to the data based on CVCS(2.3) Git is a Distributed VCS(2.4) Operation is local means Git only need local files and resources to operate, no information is needed from another computer on the network. The two benefits:      1. much faster access to files without network latency that CVCS would experiences      2. user can do almost everything normally offline. (2.5) Git stores everything in its database not by file name but by the hash value of its contents.(2.6) First is the Git directory, that’s the database where user store their objects in.It’s also where you clone repos from.      Second, the working directory is where one version of the project sits on your local computer for you to work on.      Last, the stage area is a file contained in your Git directory that stores information about what will go into the next commit.(3.1) byte codes are the machine language of the Java Virtual Machine. They are generated by compiling .java file using java.(3.2) Through the Java VM, the same application is capable of running on multiple platforms(3.3) Using JVM can be a bit slower than native code.(3.4) No. It claims Java require less effort to learn. But the fact is there are much higher level languages such as Python that are easier to learn.(3.5) /* text */      /** documentation */      // text(3.6) compile it with javac, then run it with java(4.1) Prints a String and then terminate the line. This method behaves as though it invokes print(String) and then println().(4.2) in,  its of type InputStream.(5.1) Because both of the operands are of type ‘int’, the result will be of the same type ‘int’. (5.2) the output is ‘1.0’. Because the two operands still of type ‘int’, the result of ‘x/y’ would still be of type ‘int’. Specify the type for ‘answers’ do not effect the type of ‘x/y’ to still be ‘int’(6.1) args contains the supplied comand-line arguments. (6.2) void indicates the method doesn't return anything to its caller.(6.3) Identifier are abbrs or names used to represent a particular variable, class or method. 		Identifiers cannot conflict with keywords.	An identifier can contain uppercase, lowercase characters, digits, uderscore and dollar sign.	An identifier cannot start with a digit.	An identifier can be any length.  (6.4) keywords are special words in Java and have special meanings, not to be used as a method name or variable name(6.5) float and double both represent a floating-point number. A float take 4 bytes and a double take 8 bytes, thus variable of type double can store around twice the number of significant digits as type float.(6.6) They all holds numerical integer values, but with different storage length. byte-1 byte, short-2 bytes, int- 4 bytes, long- 8 bytes. More bytes larger range of values.(6.7) String is not a primitive data type. The String data type is a class in Java.(6.8) String name = "Yuxuan Huang";(6.9) The scope indicates the lifetime of a variable. 